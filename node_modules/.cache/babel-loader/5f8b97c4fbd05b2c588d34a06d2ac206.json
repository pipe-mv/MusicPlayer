{"ast":null,"code":"var _jsxFileName = \"/Users/pipemv/Desktop/final-project/src/components/SongSearch.js\",\n    _s = $RefreshSig$();\n\nimport { SongTest } from \"./DataTes\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport FavSongTable from \"./FavSongsTable\";\nimport SongDetails from \"./SongDetails\";\nimport SongForm from \"./SongForm\";\nimport SongPage from \"./SongPage\";\nimport Loader from \"../images/Loader\";\nimport { helpHttp } from \"../helpers/helpHttp\"; // import _ from \"lodash\";\n\nimport Error404 from \"../pages/Error404\"; // import ImageSlider from \"./Slider\";\n\nimport \"../css/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mySongsInit = JSON.parse(localStorage.getItem(\"mySongs\")) || [];\nconsole.log(SongTest.items[0]);\n\nconst SongSearch = () => {\n  _s();\n\n  //Controls the singer and song search, if there's not singer or song it will be kept \"null\" in order to not show the artist\n  const [search, setsearch] = useState(null); //Handles the lyric of the artist's song\n\n  const [lyric, setLyric] = useState(null); //Saves the information of the artist\n\n  const [bio, setBio] = useState(null); //Saves my song to my favorites\n\n  const [mySongs, setMySongs] = useState(mySongsInit); //Handles the loading cirlce image\n\n  const [loading, setLoading] = useState(false); //Handles the YouTube url with the song information\n\n  const [song, setSong] = useState(\"\"); //Handles details link\n\n  const [link, setLink] = useState(false);\n  console.log(song);\n  useEffect(() => {\n    if (search === \"\") return;\n\n    const fetchData = async () => {\n      const {\n        artist,\n        song\n      } = search;\n      let artistUrl = `https://www.theaudiodb.com/api/v1/json/2/search.php?s=${artist}`;\n      let songUrl = `https://api.lyrics.ovh/v1/${artist}/${song}`; // let songUrl = `https://private-anon-9f7bebbbf5-lyricsovh.apiary-proxy.com/v1/${artist}/${song}`;\n      // let playerSearch = `https://www.googleapis.com/youtube/v3/search?maxResults=1&relevanceLanguage=en&regionCode=AU&topicId=/m/04rlf&part=snippet&q=${artist}%2${song}&key=AIzaSyDwGncvc42OOpdNBOmH1bj55AzcAKtFOZg`;\n      // console.log(playerSearch);\n      // let urlId = `https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=yKNxeF4KMsY&key=AIzaSyDwGncvc42OOpdNBOmH1bj55AzcAKtFOZg`\n      // console.log(playerSong);\n\n      setLoading(true); //   fetch(artistUrl)\n      //     .then((res) => res.json())\n      //     .then(\n      //       (result) => {\n      //         console.log(\"Artist is working\");\n      //         // console.log(result);\n      //         setBio(result);\n      //       },\n      //       (error) => {\n      //         console.log(\"There is an error Artist\");\n      //       }\n      //     );\n      //   fetch(songUrl)\n      //     .then((res) => res.json())\n      //     .then(\n      //       (result) => {\n      //         console.log(\"Song is working\");\n      //         // console.log(result);\n      //         setLyric(result);\n      //       },\n      //       (error) => {\n      //         console.log(\"There is an error in Song\");\n      //       }\n      //     );\n      // }, [search]);\n      // let songId = \"\"\n\n      const [artistRes, songRes, playerRes] = await Promise.all([helpHttp().get(artistUrl), helpHttp().get(songUrl) // helpHttp().get(playerSearch),\n      ]); // console.log(songId);\n\n      console.log(artistRes, songRes, playerRes); // let songId = _.map(playerRes.items, (video) => {\n      //   if (video.id.kind === \"youtube#video\") {\n      //     console.log(\"something\");\n      //     // let urlId = `https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${video.id.videoId}&key=AIzaSyDwGncvc42OOpdNBOmH1bj55AzcAKtFOZg`;\n      //     let urlId = SongTest\n      //     console.log(urlId);\n      //     return urlId;\n      //   }\n      // });\n      // console.log(songId);\n      // const [idRes] = await Promise.all([helpHttp().get(songId)]);\n      // console.log(idRes);\n\n      setBio(artistRes);\n      setLyric(songRes);\n      setSong(SongTest);\n      setLoading(false);\n    };\n\n    fetchData();\n    localStorage.setItem(\"mySongs\", JSON.stringify(mySongs));\n  }, [search, mySongs]); // }, []);\n\n  console.log(song); // const video = (song) => {\n  //   if (song === null) {\n  //     return;\n  //   } else if (song !== null) {\n  //     song.items.map((item) => {\n  //       console.log(\"item\", item);\n  //       const { id, snippet = {} } = item;\n  //       const { title, thumbnails = {}, resourceId } = snippet;\n  //       const { medium = {} } = thumbnails;\n  //       return (\n  //       <li key={id}>\n  //         <a href={`https://www.youtube.com/watch?v=${resourceId.videoId}`}>\n  //           <p>\n  //             <img width={medium.width} height={medium.height} src={medium.url} alt={`${search.artist} ${search.song}`} />\n  //           </p>\n  //           <h3>{title}</h3>\n  //         </a>\n  //       </li>);\n  //     });\n  //     const video = song.items;\n  //     console.log(video);\n  //     //  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`\n  //   }\n  // };\n\n  const handleSearch = data => {\n    console.log(data);\n    setsearch(data);\n  };\n\n  console.log(search);\n  console.log(lyric);\n  console.log(bio);\n\n  const handleSaveSong = () => {\n    if (lyric.err === true) {\n      return alert(\"The song can not be saved, Try it again!\");\n    } // console.log(\"saving the song to favorites\");\n\n\n    let currentSong = {\n      search,\n      lyric,\n      bio\n    };\n    let songs = [...mySongs, currentSong];\n    setMySongs(songs); // setSearch(null);\n\n    localStorage.setItem(\"mySongs\", JSON.stringify(songs));\n  };\n\n  const handleDeleteSong = id => {\n    let isDelete = window.confirm(`Â¿Are you sure of deleting this wonderful song?`);\n\n    if (isDelete) {\n      let songs = mySongs.filter((song, index) => index !== id);\n      setMySongs(songs);\n      localStorage.setItem(\"mySongs\", JSON.stringify(songs));\n    }\n  };\n\n  const handleLink = t => {\n    setLink(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(HashRouter, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"slider_title\",\n        children: \"React Image Carousel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mt-5 carousel\",\n        children: /*#__PURE__*/_jsxDEV(FavSongTable, {\n          mySongs: mySongs,\n          handleDeleteSong: handleDeleteSong,\n          handleLink: handleLink\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Song Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            children: [/*#__PURE__*/_jsxDEV(SongForm, {\n              handleSearch: handleSearch,\n              handleSaveSong: handleSaveSong,\n              songs: song\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this), search && !loading && /*#__PURE__*/_jsxDEV(SongDetails, {\n              search: search,\n              lyric: lyric,\n              bio: bio,\n              link: link\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/:id\",\n            children: /*#__PURE__*/_jsxDEV(SongPage, {\n              mySongs: mySongs\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"*\",\n            children: /*#__PURE__*/_jsxDEV(Error404, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 39\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SongSearch, \"RW7NrY2GCQRdBtLmU+nD0QhPfw4=\");\n\n_c = SongSearch;\nexport default SongSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongSearch\");","map":{"version":3,"sources":["/Users/pipemv/Desktop/final-project/src/components/SongSearch.js"],"names":["SongTest","React","useState","useEffect","HashRouter","Switch","Route","FavSongTable","SongDetails","SongForm","SongPage","Loader","helpHttp","Error404","mySongsInit","JSON","parse","localStorage","getItem","console","log","items","SongSearch","search","setsearch","lyric","setLyric","bio","setBio","mySongs","setMySongs","loading","setLoading","song","setSong","link","setLink","fetchData","artist","artistUrl","songUrl","artistRes","songRes","playerRes","Promise","all","get","setItem","stringify","handleSearch","data","handleSaveSong","err","alert","currentSong","songs","handleDeleteSong","id","isDelete","window","confirm","filter","index","handleLink","t"],"mappings":"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","sourcesContent":["import { SongTest } from \"./DataTes\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport FavSongTable from \"./FavSongsTable\";\nimport SongDetails from \"./SongDetails\";\nimport SongForm from \"./SongForm\";\nimport SongPage from \"./SongPage\";\nimport Loader from \"../images/Loader\";\nimport { helpHttp } from \"../helpers/helpHttp\";\n// import _ from \"lodash\";\nimport Error404 from \"../pages/Error404\";\n// import ImageSlider from \"./Slider\";\nimport \"../css/App.css\";\n\nconst mySongsInit = JSON.parse(localStorage.getItem(\"mySongs\")) || [];\n\nconsole.log(SongTest.items[0]);\n\nconst SongSearch = () => {\n  //Controls the singer and song search, if there's not singer or song it will be kept \"null\" in order to not show the artist\n  const [search, setsearch] = useState(null);\n  //Handles the lyric of the artist's song\n  const [lyric, setLyric] = useState(null);\n  //Saves the information of the artist\n  const [bio, setBio] = useState(null);\n  //Saves my song to my favorites\n  const [mySongs, setMySongs] = useState(mySongsInit);\n  //Handles the loading cirlce image\n  const [loading, setLoading] = useState(false);\n  //Handles the YouTube url with the song information\n  const [song, setSong] = useState(\"\");\n  //Handles details link\n  const [link, setLink] = useState(false);\n\n  console.log(song);\n\n  useEffect(() => {\n    if (search === \"\") return;\n\n    const fetchData = async () => {\n      const { artist, song } = search;\n\n      let artistUrl = `https://www.theaudiodb.com/api/v1/json/2/search.php?s=${artist}`;\n      let songUrl = `https://api.lyrics.ovh/v1/${artist}/${song}`;\n      // let songUrl = `https://private-anon-9f7bebbbf5-lyricsovh.apiary-proxy.com/v1/${artist}/${song}`;\n      // let playerSearch = `https://www.googleapis.com/youtube/v3/search?maxResults=1&relevanceLanguage=en&regionCode=AU&topicId=/m/04rlf&part=snippet&q=${artist}%2${song}&key=AIzaSyDwGncvc42OOpdNBOmH1bj55AzcAKtFOZg`;\n      // console.log(playerSearch);\n      // let urlId = `https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=yKNxeF4KMsY&key=AIzaSyDwGncvc42OOpdNBOmH1bj55AzcAKtFOZg`\n      // console.log(playerSong);\n\n      setLoading(true);\n      //   fetch(artistUrl)\n      //     .then((res) => res.json())\n      //     .then(\n      //       (result) => {\n      //         console.log(\"Artist is working\");\n      //         // console.log(result);\n      //         setBio(result);\n      //       },\n      //       (error) => {\n      //         console.log(\"There is an error Artist\");\n      //       }\n      //     );\n\n      //   fetch(songUrl)\n      //     .then((res) => res.json())\n      //     .then(\n      //       (result) => {\n      //         console.log(\"Song is working\");\n      //         // console.log(result);\n      //         setLyric(result);\n      //       },\n      //       (error) => {\n      //         console.log(\"There is an error in Song\");\n      //       }\n      //     );\n      // }, [search]);\n      // let songId = \"\"\n      const [artistRes, songRes, playerRes] = await Promise.all([\n        helpHttp().get(artistUrl),\n        helpHttp().get(songUrl),\n        // helpHttp().get(playerSearch),\n      ]);\n      // console.log(songId);\n      console.log(artistRes, songRes, playerRes);\n\n      // let songId = _.map(playerRes.items, (video) => {\n      //   if (video.id.kind === \"youtube#video\") {\n      //     console.log(\"something\");\n      //     // let urlId = `https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${video.id.videoId}&key=AIzaSyDwGncvc42OOpdNBOmH1bj55AzcAKtFOZg`;\n      //     let urlId = SongTest\n      //     console.log(urlId);\n      //     return urlId;\n      //   }\n      // });\n\n      // console.log(songId);\n\n      // const [idRes] = await Promise.all([helpHttp().get(songId)]);\n\n      // console.log(idRes);\n\n      setBio(artistRes);\n      setLyric(songRes);\n      setSong(SongTest);\n      setLoading(false);\n    };\n    fetchData();\n    localStorage.setItem(\"mySongs\", JSON.stringify(mySongs));\n  }, [search, mySongs]);\n  // }, []);\n\n  console.log(song);\n  // const video = (song) => {\n  //   if (song === null) {\n  //     return;\n  //   } else if (song !== null) {\n  //     song.items.map((item) => {\n  //       console.log(\"item\", item);\n  //       const { id, snippet = {} } = item;\n  //       const { title, thumbnails = {}, resourceId } = snippet;\n  //       const { medium = {} } = thumbnails;\n  //       return (\n  //       <li key={id}>\n  //         <a href={`https://www.youtube.com/watch?v=${resourceId.videoId}`}>\n  //           <p>\n  //             <img width={medium.width} height={medium.height} src={medium.url} alt={`${search.artist} ${search.song}`} />\n  //           </p>\n  //           <h3>{title}</h3>\n  //         </a>\n  //       </li>);\n  //     });\n  //     const video = song.items;\n  //     console.log(video);\n  //     //  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`\n  //   }\n  // };\n\n  const handleSearch = (data) => {\n    console.log(data);\n    setsearch(data);\n  };\n  \n  console.log(search);\n  console.log(lyric);\n  console.log(bio);\n\n  const handleSaveSong = () => {\n    if (lyric.err === true ) {\n      return alert(\"The song can not be saved, Try it again!\");\n    }\n\n    // console.log(\"saving the song to favorites\");\n    let currentSong = {\n      search,\n      lyric,\n      bio,\n    };\n\n    let songs = [...mySongs, currentSong];\n    setMySongs(songs);\n    // setSearch(null);\n    localStorage.setItem(\"mySongs\", JSON.stringify(songs));\n  };\n\n  const handleDeleteSong = (id) => {\n    let isDelete = window.confirm(\n      `Â¿Are you sure of deleting this wonderful song?`\n    );\n\n    if (isDelete) {\n      let songs = mySongs.filter((song, index) => index !== id);\n      setMySongs(songs);\n      localStorage.setItem(\"mySongs\", JSON.stringify(songs));\n    }\n  };\n\n  const handleLink = (t) => {\n    setLink(true)\n  }\n\n  return (\n    <div>\n      <HashRouter>\n        <h1 className=\"slider_title\">React Image Carousel</h1>\n        <div className=\"container mt-5 carousel\">\n          {/* <ImageSlider mySongs={mySongs} handleDeleteSong={handleDeleteSong} /> */}\n          <FavSongTable mySongs={mySongs} handleDeleteSong={handleDeleteSong} handleLink={handleLink} />\n        </div>\n\n        <header>\n          {/* {search && !loading && <Link to=\"/\">Home</Link>} */}\n          <h2>Song Search</h2>\n        </header>\n        {loading && <Loader />}\n        {/* {song} */}\n        <article>\n          <Switch>\n            <Route exact path=\"/\">\n              <SongForm\n                handleSearch={handleSearch}\n                handleSaveSong={handleSaveSong}\n                songs={song}\n              />\n              {search && !loading && (\n                <SongDetails search={search} lyric={lyric} bio={bio} link={link} />\n              )}\n            </Route>\n            <Route\n              exact\n              path=\"/:id\"\n              children={<SongPage mySongs={mySongs} />}\n            ></Route>\n            <Route path=\"*\" children={<Error404 />} />\n          </Switch>\n        </article>\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default SongSearch;\n"]},"metadata":{},"sourceType":"module"}