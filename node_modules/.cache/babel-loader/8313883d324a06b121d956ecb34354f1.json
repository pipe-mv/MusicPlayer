{"ast":null,"code":"var _jsxFileName = \"/Users/pipemv/Desktop/final-project/src/components/SongDetails.js\";\nimport Message from \"./Message\";\nimport SongArtist from \"./SongArtist\";\nimport SongLyric from \"./SongLyric\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SongDetails = _ref => {\n  let {\n    search,\n    lyric,\n    bio,\n    video\n  } = _ref;\n  if (!lyric || !bio) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [lyric.error || lyric.err || lyric.name === \"AbortError\" ? /*#__PURE__*/_jsxDEV(Message, {\n      msg: `Error: The song \"<em>${search.song}</em>\" does not exist`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(SongLyric, {\n      title: search.song,\n      lyric: lyric.lyrics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), bio.artists ? /*#__PURE__*/_jsxDEV(SongArtist, {\n      artist: bio.artists[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Message, {\n      msg: `Error: the singer or the band \"<em>${search.artist}</em>\" does not exist`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_c = SongDetails;\nexport default SongDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongDetails\");","map":{"version":3,"sources":["/Users/pipemv/Desktop/final-project/src/components/SongDetails.js"],"names":["Message","SongArtist","SongLyric","SongDetails","search","lyric","bio","video","error","err","name","song","lyrics","artists","artist"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;;AAEA,MAAMC,WAAW,GAAG,QAAmC;AAAA,MAAlC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,GAAjB;AAAsBC,IAAAA;AAAtB,GAAkC;AACrD,MAAI,CAACF,KAAD,IAAU,CAACC,GAAf,EAAoB,OAAO,IAAP;AACpB,sBACE;AAAA,eAEGD,KAAK,CAACG,KAAN,IAAeH,KAAK,CAACI,GAArB,IAA4BJ,KAAK,CAACK,IAAN,KAAe,YAA3C,gBACC,QAAC,OAAD;AACE,MAAA,GAAG,EAAG,wBAAuBN,MAAM,CAACO,IAAK;AAD3C;AAAA;AAAA;AAAA;AAAA,YADD,gBAKC,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEP,MAAM,CAACO,IAAzB;AAA+B,MAAA,KAAK,EAAEN,KAAK,CAACO;AAA5C;AAAA;AAAA;AAAA;AAAA,YAPJ,EASGN,GAAG,CAACO,OAAJ,gBACC,QAAC,UAAD;AAAY,MAAA,MAAM,EAAEP,GAAG,CAACO,OAAJ,CAAY,CAAZ;AAApB;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC,QAAC,OAAD;AACE,MAAA,GAAG,EAAG,sCAAqCT,MAAM,CAACU,MAAO;AAD3D;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA,kBADF;AAmBD,CArBD;;KAAMX,W;AAuBN,eAAeA,WAAf","sourcesContent":["import Message from \"./Message\";\nimport SongArtist from \"./SongArtist\";\nimport SongLyric from \"./SongLyric\";\n\nconst SongDetails = ({ search, lyric, bio, video }) => {\n  if (!lyric || !bio) return null;\n  return (\n    <>\n    \n      {lyric.error || lyric.err || lyric.name === \"AbortError\" ? (\n        <Message\n          msg={`Error: The song \"<em>${search.song}</em>\" does not exist`}\n        />\n      ) : (\n        <SongLyric title={search.song} lyric={lyric.lyrics} />\n      )}\n      {bio.artists ? (\n        <SongArtist artist={bio.artists[0]} />\n      ) : (\n        <Message\n          msg={`Error: the singer or the band \"<em>${search.artist}</em>\" does not exist`}\n        />\n      )}\n    </>\n  );\n};\n\nexport default SongDetails;\n"]},"metadata":{},"sourceType":"module"}