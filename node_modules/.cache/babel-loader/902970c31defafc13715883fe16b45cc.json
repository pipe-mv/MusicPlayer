{"ast":null,"code":"var _jsxFileName = \"/Users/pipemv/Desktop/final-project/src/components/SongDetails.js\";\nimport { Link } from \"react-router-dom\";\nimport Message from \"./Message\";\nimport SongArtist from \"./SongArtist\";\nimport SongLyric from \"./SongLyric\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SongDetails = _ref => {\n  let {\n    search,\n    lyric,\n    bio\n  } = _ref;\n  console.log(search, lyric, bio);\n  if (!lyric || !bio) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [search !== null && lyric === true && bio === true ? /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: \"Search again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 62\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), lyric.error || lyric.err || lyric.name === \"AbortError\" ? /*#__PURE__*/_jsxDEV(Message, {\n      msg: `Error: The song \"<em>${search.song}</em>\" does not exist`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(SongLyric, {\n      title: search.song,\n      lyric: lyric.lyrics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), bio.artists ? /*#__PURE__*/_jsxDEV(SongArtist, {\n      artist: bio.artists[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Message, {\n      msg: `Error: the singer or the band \"<em>${search.artist}</em>\" does not exist`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_c = SongDetails;\nexport default SongDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongDetails\");","map":{"version":3,"sources":["/Users/pipemv/Desktop/final-project/src/components/SongDetails.js"],"names":["Link","Message","SongArtist","SongLyric","SongDetails","search","lyric","bio","console","log","error","err","name","song","lyrics","artists","artist"],"mappings":";AAAA,SAASA,IAAT,QAAqB,kBAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;;AAEA,MAAMC,WAAW,GAAG,QAA4B;AAAA,MAA3B;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,GAA2B;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAAoBC,KAApB,EAA2BC,GAA3B;AACA,MAAI,CAACD,KAAD,IAAU,CAACC,GAAf,EAAoB,OAAO,IAAP;AACpB,sBACE;AAAA,eAEIF,MAAM,KAAK,IAAX,IAAmBC,KAAK,KAAK,IAA7B,IAAqCC,GAAG,KAAK,IAA9C,gBAAsD,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAtD,gBAAyF,qCAF5F,EAGGD,KAAK,CAACI,KAAN,IAAeJ,KAAK,CAACK,GAArB,IAA4BL,KAAK,CAACM,IAAN,KAAe,YAA3C,gBACC,QAAC,OAAD;AACE,MAAA,GAAG,EAAG,wBAAuBP,MAAM,CAACQ,IAAK;AAD3C;AAAA;AAAA;AAAA;AAAA,YADD,gBAKC,QAAC,SAAD;AAAW,MAAA,KAAK,EAAER,MAAM,CAACQ,IAAzB;AAA+B,MAAA,KAAK,EAAEP,KAAK,CAACQ;AAA5C;AAAA;AAAA;AAAA;AAAA,YARJ,EAUGP,GAAG,CAACQ,OAAJ,gBACC,QAAC,UAAD;AAAY,MAAA,MAAM,EAAER,GAAG,CAACQ,OAAJ,CAAY,CAAZ;AAApB;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC,QAAC,OAAD;AACE,MAAA,GAAG,EAAG,sCAAqCV,MAAM,CAACW,MAAO;AAD3D;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA,kBADF;AAoBD,CAvBD;;KAAMZ,W;AAyBN,eAAeA,WAAf","sourcesContent":["import { Link } from \"react-router-dom\";\nimport Message from \"./Message\";\nimport SongArtist from \"./SongArtist\";\nimport SongLyric from \"./SongLyric\";\n\nconst SongDetails = ({ search, lyric, bio }) => {\n  console.log(search, lyric, bio);\n  if (!lyric || !bio) return null;\n  return (\n    <>\n      {/* {!search ? <></> : !lyric ? <></> : !bio ? <></> : <Link to=\"/\">Search again</Link>} */}\n      {(search !== null && lyric === true && bio === true)? (<Link to=\"/\">Search again</Link>):(<></>)}\n      {lyric.error || lyric.err || lyric.name === \"AbortError\" ? (\n        <Message\n          msg={`Error: The song \"<em>${search.song}</em>\" does not exist`}\n        />\n      ) : (\n        <SongLyric title={search.song} lyric={lyric.lyrics} />\n      )}\n      {bio.artists ? (\n        <SongArtist artist={bio.artists[0]} />\n      ) : (\n        <Message\n          msg={`Error: the singer or the band \"<em>${search.artist}</em>\" does not exist`}\n        />\n      )}\n    </>\n  );\n};\n\nexport default SongDetails;\n"]},"metadata":{},"sourceType":"module"}