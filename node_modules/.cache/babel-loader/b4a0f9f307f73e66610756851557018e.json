{"ast":null,"code":"var _jsxFileName = \"/Users/pipe/Developer/MyGithub/14_MusicPlayer/src/components/SongSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { HashRouter, Link, Switch, Route } from \"react-router-dom\";\nimport FavSongTable from \"./FavSongsTable\";\nimport SongDetails from \"./SongDetails\";\nimport SongForm from \"./SongForm\";\nimport SongPage from \"./SongPage\";\nimport Loader from \"../images/Loader\";\nimport { helpHttp } from \"../helpers/helpHttp\";\nimport Error404 from \"../pages/Error404\";\nimport \"../css/App.css\";\nimport Logo from \"../images/Logo.png\";\nimport HomeLogo from \"../images/home.png\";\nimport Footer from \"./Footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(process.env);\nconst YOUTUBE_API = process.env.REACT_APP_YOUTUBE_API_KEY;\nconst mySongsInit = JSON.parse(localStorage.getItem(\"mySongs\")) || [];\nconsole.log(YOUTUBE_API); // console.log(SongTest.items[0]);\n\nconst SongSearch = () => {\n  _s();\n\n  //Controls the singer and song search, if there's not singer or song it will be kept \"null\" in order to not show the artist\n  const [search, setSearch] = useState(\"\"); //Handles the lyric of the artist's song\n\n  const [lyric, setLyric] = useState(null); //Handles the information of the artist\n\n  const [bio, setBio] = useState(null); //Handles the informatin about the YouTube id\n\n  const [youTubeId, setYouTubeId] = useState(null); //Saves my song to my favorites\n\n  const [mySongs, setMySongs] = useState(mySongsInit); //Handles the loading cirlce image\n\n  const [loading, setLoading] = useState(false); //Handles the YouTube url with the song information\n\n  const [songYouTube, setSongYouTube] = useState(\"\"); //handles the favorite song selected from the carousel\n\n  const [favIdSelected, setFavIdSelected] = useState(\"\");\n  useEffect(() => {\n    if (search === \"\") return;\n\n    const fetchData = async () => {\n      const {\n        artist,\n        song\n      } = search;\n      let artistUrl = `https://www.theaudiodb.com/api/v1/json/2/search.php?s=${artist}`;\n      let songUrl = `https://api.lyrics.ovh/v1/${artist}/${song}`;\n      let playerSearch = `https://www.googleapis.com/youtube/v3/search?maxResults=1&relevanceLanguage=en&regionCode=AU&topicId=/m/04rlf&part=snippet&q=${artist}%20${song}&key=${YOUTUBE_API}`; // console.log(playerSearch);\n\n      setLoading(true);\n      const [artistRes, songRes] = await Promise.all([helpHttp().get(artistUrl), helpHttp().get(songUrl)]); // console.log(artistRes, songRes);\n\n      setBio(artistRes);\n      setLyric(songRes);\n\n      if (songRes.err === true || artistRes.artists === null) {\n        console.log(\"error before loading api 1\");\n        setLoading(false);\n        return;\n      }\n\n      const playerRes = await Promise.all([helpHttp().get(playerSearch)]); // console.log(playerRes);\n\n      setSongYouTube(playerRes[0]);\n      setYouTubeId(playerRes[0].items[0].id.videoId);\n      setLoading(false);\n    };\n\n    fetchData();\n    localStorage.setItem(\"mySongs\", JSON.stringify(mySongs));\n  }, [search, mySongs]); // console.log(youTubeId);\n\n  const handleSearch = data => {\n    // console.log(data);\n    setSearch(data);\n  }; // console.log(search);\n  // console.log(lyric);\n  // console.log(bio);\n  // console.log(youTubeId);\n\n\n  const handleSaveSong = () => {\n    if (lyric.err === true || bio.artists === null) {\n      return alert(\"The song can not be saved, Try it again!\");\n    } // console.log(\"saving the song to favorites\");\n\n\n    let currentSong = {\n      search,\n      lyric,\n      bio,\n      songYouTube\n    };\n    let songs = [...mySongs, currentSong];\n    setMySongs(songs); // setSearch(null);\n\n    localStorage.setItem(\"mySongs\", JSON.stringify(songs));\n  };\n\n  const handleDeleteSong = id => {\n    let isDelete = window.confirm(`Â¿Are you sure of deleting this wonderful song?`);\n\n    if (isDelete) {\n      let songs = mySongs.filter((song, index) => index !== id);\n      setMySongs(songs);\n      localStorage.setItem(\"mySongs\", JSON.stringify(songs));\n    }\n  }; // console.log(search, lyric, bio, songYouTube);\n\n\n  const favId = id => {\n    // console.log(\"this is favId function\", id);\n    let searchData = mySongs.filter((song, index) => index === id ? song : \"\"); // console.log(\"song equal\", searchData);\n\n    setFavIdSelected(searchData);\n    setSearch(searchData[0].search);\n    setBio(searchData[0].bio);\n    setLyric(searchData[0].lyric); // console.log(searchData[0].songYouTube);\n\n    setSongYouTube(searchData[0].songYouTube);\n  }; // console.log(search, lyric, bio, songYouTube);\n  // console.log(\"favIdSelected\", favIdSelected);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(HashRouter, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"logo\",\n        src: Logo,\n        alt: \"Music logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mt-5 carousel\",\n        children: /*#__PURE__*/_jsxDEV(FavSongTable, {\n          mySongs: mySongs,\n          handleDeleteSong: handleDeleteSong,\n          favId: favId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"selected\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"homeIcon\",\n            src: HomeLogo,\n            alt: \"home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Song Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SongForm, {\n              handleSearch: handleSearch,\n              handleSaveSong: handleSaveSong // songs={song}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 27\n            }, this), search && !loading && /*#__PURE__*/_jsxDEV(SongDetails, {\n              search: search,\n              lyric: lyric,\n              bio: bio,\n              songYouTube: songYouTube,\n              favId: favIdSelected,\n              youTubeId: youTubeId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/:id\",\n            children: /*#__PURE__*/_jsxDEV(SongPage, {\n              mySongs: mySongs,\n              songYouTube: songYouTube,\n              favId: favIdSelected,\n              youTubeId: youTubeId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"*\",\n            children: /*#__PURE__*/_jsxDEV(Error404, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 39\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SongSearch, \"lC2/voAaNKmOb5kjng9KNps7Joo=\");\n\n_c = SongSearch;\nexport default SongSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongSearch\");","map":{"version":3,"sources":["/Users/pipe/Developer/MyGithub/14_MusicPlayer/src/components/SongSearch.js"],"names":["React","useState","useEffect","HashRouter","Link","Switch","Route","FavSongTable","SongDetails","SongForm","SongPage","Loader","helpHttp","Error404","Logo","HomeLogo","Footer","console","log","process","env","YOUTUBE_API","REACT_APP_YOUTUBE_API_KEY","mySongsInit","JSON","parse","localStorage","getItem","SongSearch","search","setSearch","lyric","setLyric","bio","setBio","youTubeId","setYouTubeId","mySongs","setMySongs","loading","setLoading","songYouTube","setSongYouTube","favIdSelected","setFavIdSelected","fetchData","artist","song","artistUrl","songUrl","playerSearch","artistRes","songRes","Promise","all","get","err","artists","playerRes","items","id","videoId","setItem","stringify","handleSearch","data","handleSaveSong","alert","currentSong","songs","handleDeleteSong","isDelete","window","confirm","filter","index","favId","searchData"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { HashRouter, Link, Switch, Route } from \"react-router-dom\";\nimport FavSongTable from \"./FavSongsTable\";\nimport SongDetails from \"./SongDetails\";\nimport SongForm from \"./SongForm\";\nimport SongPage from \"./SongPage\";\nimport Loader from \"../images/Loader\";\nimport { helpHttp } from \"../helpers/helpHttp\";\nimport Error404 from \"../pages/Error404\";\nimport \"../css/App.css\";\nimport Logo from \"../images/Logo.png\";\nimport HomeLogo from \"../images/home.png\";\nimport Footer from \"./Footer\";\n\nconsole.log(process.env);\nconst YOUTUBE_API = process.env.REACT_APP_YOUTUBE_API_KEY;\nconst mySongsInit = JSON.parse(localStorage.getItem(\"mySongs\")) || [];\nconsole.log(YOUTUBE_API);\n// console.log(SongTest.items[0]);\n\nconst SongSearch = () => {\n  //Controls the singer and song search, if there's not singer or song it will be kept \"null\" in order to not show the artist\n  const [search, setSearch] = useState(\"\");\n  //Handles the lyric of the artist's song\n  const [lyric, setLyric] = useState(null);\n  //Handles the information of the artist\n  const [bio, setBio] = useState(null);\n  //Handles the informatin about the YouTube id\n  const [youTubeId, setYouTubeId] = useState(null);\n  //Saves my song to my favorites\n  const [mySongs, setMySongs] = useState(mySongsInit);\n  //Handles the loading cirlce image\n  const [loading, setLoading] = useState(false);\n  //Handles the YouTube url with the song information\n  const [songYouTube, setSongYouTube] = useState(\"\");\n  //handles the favorite song selected from the carousel\n  const [favIdSelected, setFavIdSelected] = useState(\"\");\n\n  useEffect(() => {\n    if (search === \"\") return;\n\n    const fetchData = async () => {\n      const { artist, song } = search;\n\n      let artistUrl = `https://www.theaudiodb.com/api/v1/json/2/search.php?s=${artist}`;\n      let songUrl = `https://api.lyrics.ovh/v1/${artist}/${song}`;\n\n      let playerSearch = `https://www.googleapis.com/youtube/v3/search?maxResults=1&relevanceLanguage=en&regionCode=AU&topicId=/m/04rlf&part=snippet&q=${artist}%20${song}&key=${YOUTUBE_API}`;\n      // console.log(playerSearch);\n\n      setLoading(true);\n\n      const [artistRes, songRes] = await Promise.all([\n        helpHttp().get(artistUrl),\n        helpHttp().get(songUrl),\n      ]);\n      // console.log(artistRes, songRes);\n\n      setBio(artistRes);\n      setLyric(songRes);\n\n      if (songRes.err === true || artistRes.artists === null) {\n        console.log(\"error before loading api 1\");\n        setLoading(false);\n        return;\n      }\n\n      const playerRes = await Promise.all([helpHttp().get(playerSearch)]);\n      // console.log(playerRes);\n\n      setSongYouTube(playerRes[0]);\n      setYouTubeId(playerRes[0].items[0].id.videoId);\n      setLoading(false);\n    };\n    fetchData();\n    localStorage.setItem(\"mySongs\", JSON.stringify(mySongs));\n  }, [search, mySongs]);\n\n  // console.log(youTubeId);\n  const handleSearch = (data) => {\n    // console.log(data);\n    setSearch(data);\n  };\n\n  // console.log(search);\n  // console.log(lyric);\n  // console.log(bio);\n  // console.log(youTubeId);\n\n  const handleSaveSong = () => {\n    if (lyric.err === true || bio.artists === null) {\n      return alert(\"The song can not be saved, Try it again!\");\n    }\n\n    // console.log(\"saving the song to favorites\");\n    let currentSong = {\n      search,\n      lyric,\n      bio,\n      songYouTube,\n    };\n\n    let songs = [...mySongs, currentSong];\n    setMySongs(songs);\n    // setSearch(null);\n    localStorage.setItem(\"mySongs\", JSON.stringify(songs));\n  };\n\n  const handleDeleteSong = (id) => {\n    let isDelete = window.confirm(\n      `Â¿Are you sure of deleting this wonderful song?`\n    );\n\n    if (isDelete) {\n      let songs = mySongs.filter((song, index) => index !== id);\n      setMySongs(songs);\n      localStorage.setItem(\"mySongs\", JSON.stringify(songs));\n    }\n  };\n\n  // console.log(search, lyric, bio, songYouTube);\n\n  const favId = (id) => {\n    // console.log(\"this is favId function\", id);\n    let searchData = mySongs.filter((song, index) =>\n      index === id ? song : \"\"\n    );\n    // console.log(\"song equal\", searchData);\n\n    setFavIdSelected(searchData);\n    setSearch(searchData[0].search);\n    setBio(searchData[0].bio);\n    setLyric(searchData[0].lyric);\n    // console.log(searchData[0].songYouTube);\n    setSongYouTube(searchData[0].songYouTube);\n  };\n  // console.log(search, lyric, bio, songYouTube);\n  // console.log(\"favIdSelected\", favIdSelected);\n\n  return (\n    <div>\n      <HashRouter>\n        <img className=\"logo\" src={Logo} alt=\"Music logo\"></img>\n\n        <div className=\"container mt-5 carousel\">\n          <FavSongTable\n            mySongs={mySongs}\n            handleDeleteSong={handleDeleteSong}\n            favId={favId}\n          />\n        </div>\n\n        <header>\n          <Link to=\"/\" className=\"selected\">\n            <img className=\"homeIcon\" src={HomeLogo} alt=\"home\" />\n          </Link>\n        </header>\n        {/* {song} */}\n        <article>\n          <Switch>\n            <Route exact path=\"/\">\n              <h2>Song Search</h2>\n              <SongForm\n                handleSearch={handleSearch}\n                handleSaveSong={handleSaveSong}\n                // songs={song}\n              />\n              {loading && <Loader />}\n              {search && !loading && (\n                <SongDetails\n                  search={search}\n                  lyric={lyric}\n                  bio={bio}\n                  songYouTube={songYouTube}\n                  favId={favIdSelected}\n                  youTubeId={youTubeId}\n                />\n              )}\n            </Route>\n            <Route\n              exact\n              path=\"/:id\"\n              children={\n                <SongPage\n                  mySongs={mySongs}\n                  songYouTube={songYouTube}\n                  favId={favIdSelected}\n                  youTubeId={youTubeId}\n                />\n              }\n            ></Route>\n            <Route path=\"*\" children={<Error404 />} />\n          </Switch>\n        </article>\n        <Footer />\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default SongSearch;\n"]},"metadata":{},"sourceType":"module"}