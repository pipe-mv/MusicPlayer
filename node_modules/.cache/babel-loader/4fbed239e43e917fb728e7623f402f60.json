{"ast":null,"code":"var _jsxFileName = \"/Users/pipemv/Desktop/final-project/src/components/SongSearch.js\",\n    _s = $RefreshSig$();\n\n// import { SongTest } from \"./DataTes\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { HashRouter, Link, Switch, Route } from \"react-router-dom\";\nimport FavSongTable from \"./FavSongsTable\";\nimport SongDetails from \"./SongDetails\";\nimport SongForm from \"./SongForm\";\nimport SongPage from \"./SongPage\";\nimport Loader from \"../images/Loader\";\nimport { helpHttp } from \"../helpers/helpHttp\";\nimport _ from \"lodash\";\nimport Error404 from \"../pages/Error404\"; // import ImageSlider from \"./Slider\";\n\nimport \"../css/App.css\";\nimport Logo from \"../images/Logo.png\";\nimport HomeLogo from \"../images/home2.png\";\nimport Footer from \"./Footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mySongsInit = JSON.parse(localStorage.getItem(\"mySongs\")) || []; // console.log(SongTest.items[0]);\n\nconst SongSearch = () => {\n  _s();\n\n  //Controls the singer and song search, if there's not singer or song it will be kept \"null\" in order to not show the artist\n  const [search, setsearch] = useState(null); //Handles the lyric of the artist's song\n\n  const [lyric, setLyric] = useState(null); //Saves the information of the artist\n\n  const [bio, setBio] = useState(null); //Saves my song to my favorites\n\n  const [mySongs, setMySongs] = useState(mySongsInit); //Handles the loading cirlce image\n\n  const [loading, setLoading] = useState(false); //Handles the YouTube url with the song information\n\n  const [songYouTube, setSongYouTube] = useState(\"\");\n  console.log(songYouTube);\n  useEffect(() => {\n    if (search === \"\") return;\n\n    const fetchData = async () => {\n      const {\n        artist,\n        song\n      } = search;\n      let artistUrl = `https://www.theaudiodb.com/api/v1/json/2/search.php?s=${artist}`;\n      let songUrl = `https://api.lyrics.ovh/v1/${artist}/${song}`;\n      let playerSearch = `https://www.googleapis.com/youtube/v3/search?maxResults=1&relevanceLanguage=en&regionCode=AU&topicId=/m/04rlf&part=snippet&q=${artist}%20${song}&key=AIzaSyCx0_c96ixoYzQUcp_0tgct7hI-PVoO6EU`;\n      console.log(playerSearch); // let urlId = `https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=yKNxeF4KMsY&key=AIzaSyDwGncvc42OOpdNBOmH1bj55AzcAKtFOZg`\n      // console.log(playerSong);\n\n      setLoading(true); //   fetch(artistUrl)\n      //     .then((res) => res.json())\n      //     .then(\n      //       (result) => {\n      //         console.log(\"Artist is working\");\n      //         // console.log(result);\n      //         setBio(result);\n      //       },\n      //       (error) => {\n      //         console.log(\"There is an error Artist\");\n      //       }\n      //     );\n      //   fetch(songUrl)\n      //     .then((res) => res.json())\n      //     .then(\n      //       (result) => {\n      //         console.log(\"Song is working\");\n      //         // console.log(result);\n      //         setLyric(result);\n      //       },\n      //       (error) => {\n      //         console.log(\"There is an error in Song\");\n      //       }\n      //     );\n      // }, [search]);\n      // let songId = \"\"\n\n      const [artistRes, songRes] = await Promise.all([helpHttp().get(artistUrl), helpHttp().get(songUrl) // helpHttp().get(playerSearch),\n      ]); // console.log(songId);\n\n      console.log(artistRes, songRes);\n      setBio(artistRes);\n      setLyric(songRes);\n\n      if (songRes.err === true || artistRes.artists === null) {\n        console.log(\"error before loading api 1\");\n        setLoading(false);\n        return;\n      }\n\n      const playerRes = await Promise.all([helpHttp().get(playerSearch)]);\n      console.log(playerRes);\n\n      let songId = _.map(playerRes.items, video => {\n        if (video.id.kind === \"youtube#video\") {\n          console.log(\"something\");\n          let urlId = `https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${video.id.videoId}&key=AIzaSyCx0_c96ixoYzQUcp_0tgct7hI-PVoO6EU`; // let urlId = SongTest\n\n          console.log(urlId);\n          return urlId;\n        }\n      });\n\n      const idRes = await Promise.all([helpHttp().get(songId)]);\n      console.log(songId);\n      console.log(idRes);\n      setSongYouTube(idRes);\n      setLoading(false);\n    };\n\n    fetchData();\n    localStorage.setItem(\"mySongs\", JSON.stringify(mySongs));\n  }, [search, mySongs]); // }, []);\n\n  console.log(songYouTube); // const video = (song) => {\n  //   if (song === null) {\n  //     return;\n  //   } else if (song !== null) {\n  //     song.items.map((item) => {\n  //       console.log(\"item\", item);\n  //       const { id, snippet = {} } = item;\n  //       const { title, thumbnails = {}, resourceId } = snippet;\n  //       const { medium = {} } = thumbnails;\n  //       return (\n  //       <li key={id}>\n  //         <a href={`https://www.youtube.com/watch?v=${resourceId.videoId}`}>\n  //           <p>\n  //             <img width={medium.width} height={medium.height} src={medium.url} alt={`${search.artist} ${search.song}`} />\n  //           </p>\n  //           <h3>{title}</h3>\n  //         </a>\n  //       </li>);\n  //     });\n  //     const video = song.items;\n  //     console.log(video);\n  //     //  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`\n  //   }\n  // };\n\n  const handleSearch = data => {\n    console.log(data);\n    setsearch(data);\n  };\n\n  console.log(search);\n  console.log(lyric);\n  console.log(bio);\n\n  const handleSaveSong = () => {\n    if (lyric.err === true || bio.artists === null) {\n      return alert(\"The song can not be saved, Try it again!\");\n    } // console.log(\"saving the song to favorites\");\n\n\n    let currentSong = {\n      search,\n      lyric,\n      bio\n    };\n    let songs = [...mySongs, currentSong];\n    setMySongs(songs); // setSearch(null);\n\n    localStorage.setItem(\"mySongs\", JSON.stringify(songs));\n  };\n\n  const handleDeleteSong = id => {\n    let isDelete = window.confirm(`Â¿Are you sure of deleting this wonderful song?`);\n\n    if (isDelete) {\n      let songs = mySongs.filter((song, index) => index !== id);\n      setMySongs(songs);\n      localStorage.setItem(\"mySongs\", JSON.stringify(songs));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(HashRouter, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"logo\",\n        src: Logo,\n        alt: \"Music logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mt-5 carousel\",\n        children: /*#__PURE__*/_jsxDEV(FavSongTable, {\n          mySongs: mySongs,\n          handleDeleteSong: handleDeleteSong\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"selected\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"homeIcon\",\n            src: HomeLogo,\n            alt: \"home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Song Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SongForm, {\n              handleSearch: handleSearch,\n              handleSaveSong: handleSaveSong // songs={song}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), search && !loading && /*#__PURE__*/_jsxDEV(SongDetails, {\n              search: search,\n              lyric: lyric,\n              bio: bio,\n              songYouTube: songYouTube\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/:id\",\n            children: /*#__PURE__*/_jsxDEV(SongPage, {\n              mySongs: mySongs\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"*\",\n            children: /*#__PURE__*/_jsxDEV(Error404, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 39\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SongSearch, \"waFy4yiR0FhOS/0Ip0BL4y30Ht0=\");\n\n_c = SongSearch;\nexport default SongSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongSearch\");","map":{"version":3,"sources":["/Users/pipemv/Desktop/final-project/src/components/SongSearch.js"],"names":["React","useState","useEffect","HashRouter","Link","Switch","Route","FavSongTable","SongDetails","SongForm","SongPage","Loader","helpHttp","_","Error404","Logo","HomeLogo","Footer","mySongsInit","JSON","parse","localStorage","getItem","SongSearch","search","setsearch","lyric","setLyric","bio","setBio","mySongs","setMySongs","loading","setLoading","songYouTube","setSongYouTube","console","log","fetchData","artist","song","artistUrl","songUrl","playerSearch","artistRes","songRes","Promise","all","get","err","artists","playerRes","songId","map","items","video","id","kind","urlId","videoId","idRes","setItem","stringify","handleSearch","data","handleSaveSong","alert","currentSong","songs","handleDeleteSong","isDelete","window","confirm","filter","index"],"mappings":"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","sourcesContent":["// import { SongTest } from \"./DataTes\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { HashRouter, Link, Switch, Route } from \"react-router-dom\";\nimport FavSongTable from \"./FavSongsTable\";\nimport SongDetails from \"./SongDetails\";\nimport SongForm from \"./SongForm\";\nimport SongPage from \"./SongPage\";\nimport Loader from \"../images/Loader\";\nimport { helpHttp } from \"../helpers/helpHttp\";\nimport _ from \"lodash\";\nimport Error404 from \"../pages/Error404\";\n// import ImageSlider from \"./Slider\";\nimport \"../css/App.css\";\nimport Logo from \"../images/Logo.png\";\nimport HomeLogo from \"../images/home2.png\";\nimport Footer from \"./Footer\";\n\nconst mySongsInit = JSON.parse(localStorage.getItem(\"mySongs\")) || [];\n\n// console.log(SongTest.items[0]);\n\nconst SongSearch = () => {\n  //Controls the singer and song search, if there's not singer or song it will be kept \"null\" in order to not show the artist\n  const [search, setsearch] = useState(null);\n  //Handles the lyric of the artist's song\n  const [lyric, setLyric] = useState(null);\n  //Saves the information of the artist\n  const [bio, setBio] = useState(null);\n  //Saves my song to my favorites\n  const [mySongs, setMySongs] = useState(mySongsInit);\n  //Handles the loading cirlce image\n  const [loading, setLoading] = useState(false);\n  //Handles the YouTube url with the song information\n  const [songYouTube, setSongYouTube] = useState(\"\");\n\n  console.log(songYouTube);\n\n  useEffect(() => {\n    if (search === \"\") return;\n    \n    const fetchData = async () => {\n      const { artist, song } = search;\n\n      let artistUrl = `https://www.theaudiodb.com/api/v1/json/2/search.php?s=${artist}`;\n      let songUrl = `https://api.lyrics.ovh/v1/${artist}/${song}`;\n      \n      \n      let playerSearch = `https://www.googleapis.com/youtube/v3/search?maxResults=1&relevanceLanguage=en&regionCode=AU&topicId=/m/04rlf&part=snippet&q=${artist}%20${song}&key=AIzaSyCx0_c96ixoYzQUcp_0tgct7hI-PVoO6EU`;\n      console.log(playerSearch);\n      // let urlId = `https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=yKNxeF4KMsY&key=AIzaSyDwGncvc42OOpdNBOmH1bj55AzcAKtFOZg`\n      // console.log(playerSong);\n\n      setLoading(true);\n      //   fetch(artistUrl)\n      //     .then((res) => res.json())\n      //     .then(\n      //       (result) => {\n      //         console.log(\"Artist is working\");\n      //         // console.log(result);\n      //         setBio(result);\n      //       },\n      //       (error) => {\n      //         console.log(\"There is an error Artist\");\n      //       }\n      //     );\n\n      //   fetch(songUrl)\n      //     .then((res) => res.json())\n      //     .then(\n      //       (result) => {\n      //         console.log(\"Song is working\");\n      //         // console.log(result);\n      //         setLyric(result);\n      //       },\n      //       (error) => {\n      //         console.log(\"There is an error in Song\");\n      //       }\n      //     );\n      // }, [search]);\n      // let songId = \"\"\n      const [artistRes, songRes] = await Promise.all([\n        helpHttp().get(artistUrl),\n        helpHttp().get(songUrl),\n        // helpHttp().get(playerSearch),\n      ]);\n      // console.log(songId);\n      console.log(artistRes, songRes);\n\n      setBio(artistRes);\n      setLyric(songRes);\n\n      if (songRes.err === true || artistRes.artists === null) {\n        console.log(\"error before loading api 1\");\n        setLoading(false);\n        return \n      }\n\n      const playerRes = await Promise.all([helpHttp().get(playerSearch)]);\n      console.log(playerRes);\n      \n      let songId = _.map(playerRes.items, (video) => {\n        if (video.id.kind === \"youtube#video\") {\n          console.log(\"something\");\n          let urlId = `https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=${video.id.videoId}&key=AIzaSyCx0_c96ixoYzQUcp_0tgct7hI-PVoO6EU`;\n          // let urlId = SongTest\n          console.log(urlId);\n          return urlId;\n        }\n      });\n\n      \n      const idRes = await Promise.all([helpHttp().get(songId)]);\n      console.log(songId);\n\n      console.log(idRes);\n\n      setSongYouTube(idRes);\n      setLoading(false);\n    };\n    fetchData();\n    localStorage.setItem(\"mySongs\", JSON.stringify(mySongs));\n  }, [search, mySongs]);\n  // }, []);\n\n  console.log(songYouTube);\n  // const video = (song) => {\n  //   if (song === null) {\n  //     return;\n  //   } else if (song !== null) {\n  //     song.items.map((item) => {\n  //       console.log(\"item\", item);\n  //       const { id, snippet = {} } = item;\n  //       const { title, thumbnails = {}, resourceId } = snippet;\n  //       const { medium = {} } = thumbnails;\n  //       return (\n  //       <li key={id}>\n  //         <a href={`https://www.youtube.com/watch?v=${resourceId.videoId}`}>\n  //           <p>\n  //             <img width={medium.width} height={medium.height} src={medium.url} alt={`${search.artist} ${search.song}`} />\n  //           </p>\n  //           <h3>{title}</h3>\n  //         </a>\n  //       </li>);\n  //     });\n  //     const video = song.items;\n  //     console.log(video);\n  //     //  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`\n  //   }\n  // };\n\n  const handleSearch = (data) => {\n    console.log(data);\n    setsearch(data);\n  };\n\n  console.log(search);\n  console.log(lyric);\n  console.log(bio);\n\n  const handleSaveSong = () => {\n    if (lyric.err === true || bio.artists === null) {\n      return alert(\"The song can not be saved, Try it again!\");\n    }\n\n    // console.log(\"saving the song to favorites\");\n    let currentSong = {\n      search,\n      lyric,\n      bio,\n    };\n\n    let songs = [...mySongs, currentSong];\n    setMySongs(songs);\n    // setSearch(null);\n    localStorage.setItem(\"mySongs\", JSON.stringify(songs));\n  };\n\n  const handleDeleteSong = (id) => {\n    let isDelete = window.confirm(\n      `Â¿Are you sure of deleting this wonderful song?`\n    );\n\n    if (isDelete) {\n      let songs = mySongs.filter((song, index) => index !== id);\n      setMySongs(songs);\n      localStorage.setItem(\"mySongs\", JSON.stringify(songs));\n    }\n  };\n\n  return (\n    <div>\n      <HashRouter>\n        <img className=\"logo\" src={Logo} alt=\"Music logo\"></img>\n\n        <div className=\"container mt-5 carousel\">\n          <FavSongTable mySongs={mySongs} handleDeleteSong={handleDeleteSong} />\n        </div>\n\n        <header>\n          <Link to=\"/\" className=\"selected\">\n            <img className=\"homeIcon\" src={HomeLogo} alt=\"home\" />\n          </Link>\n        </header>\n        {loading && <Loader />}\n        {/* {song} */}\n        <article>\n          <Switch>\n            <Route exact path=\"/\">\n              <h2>Song Search</h2>\n              <SongForm\n                handleSearch={handleSearch}\n                handleSaveSong={handleSaveSong}\n                // songs={song}\n              />\n              {search && !loading && (\n                <SongDetails\n                  search={search}\n                  lyric={lyric}\n                  bio={bio}\n                  songYouTube={songYouTube}\n                />\n              )}\n            </Route>\n            <Route\n              exact\n              path=\"/:id\"\n              children={<SongPage mySongs={mySongs} />}\n            ></Route>\n            <Route path=\"*\" children={<Error404 />} />\n          </Switch>\n        </article>\n        <Footer />\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default SongSearch;\n"]},"metadata":{},"sourceType":"module"}